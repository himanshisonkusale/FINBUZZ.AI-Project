import asyncio
import json
import os
from pathlib import Path
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.messages import TextMessage
from autogen_agentchat.tools import AgentTool
from autogen_core.tools import FunctionTool
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_ext.tools.langchain import LangChainToolAdapter
from langchain.tools.tavily_search import TavilySearchResults
import warnings
from datetime import datetime

def load_fraud_detection_data() -> str:
    """Load fraud detection transaction data from JSON file"""
    try:
        file_path = "user_data/finbot_fraud_detector.json"
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return json.dumps(data, indent=2)
        else:
            # Return sample data if file doesn't exist
            sample_data = {
                "user_id": "USER12345",
                "account_number": "XXXX-XXXX-XXXX-1234",
                "transactions": [
                    {
                        "transaction_id": "TXN001",
                        "date": "2024-08-05",
                        "time": "14:30:00",
                        "amount": 25000.00,
                        "merchant": "Online Shopping Pvt Ltd",
                        "location": "Mumbai, India",
                        "transaction_type": "Debit Card",
                        "status": "Completed",
                        "category": "Shopping"
                    },
                    {
                        "transaction_id": "TXN002",
                        "date": "2024-08-05",
                        "time": "02:45:00",
                        "amount": 50000.00,
                        "merchant": "ATM Withdrawal",
                        "location": "Unknown Location, Delhi",
                        "transaction_type": "ATM",
                        "status": "Completed",
                        "category": "Cash Withdrawal"
                    },
                    {
                        "transaction_id": "TXN003",
                        "date": "2024-08-05",
                        "time": "03:15:00",
                        "amount": 75000.00,
                        "merchant": "International Transfer",
                        "location": "Nigeria",
                        "transaction_type": "Wire Transfer",
                        "status": "Completed",
                        "category": "Transfer"
                    }
                ]
            }
            return json.dumps(sample_data, indent=2)
    except Exception as e:
        return f"Error loading fraud detection data: {str(e)}"

def report_fraud_to_bank(transaction_ids: list, user_decision: str = "yes") -> str:
    """Simulate reporting fraud to bank servers"""
    if user_decision.lower() in ["yes", "y", "proceed", "report"]:
        return f"✅ FRAUD REPORTED TO BANK SERVERS\n\nTransaction IDs: {', '.join(transaction_ids)}\nTimestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nStatus: Reported Successfully\nReference Number: FR{datetime.now().strftime('%Y%m%d%H%M')}\n\n🔒 Your account has been temporarily secured for investigation."
    else:
        return "❌ Fraud report cancelled by user request."

def generate_fir_mail(transaction_data: str, fraud_transactions: list) -> str:
    """Generate FIR mail content for police department"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    fir_mail = f"""
📧 FRAUD REPORT - FIR LODGING MAIL

To: cybercrime@police.gov.in
Subject: Fraudulent Banking Transactions Report - Urgent Action Required

Dear Sir/Madam,

I am writing to report fraudulent banking transactions that have occurred on my account. Please find the details below:

COMPLAINANT DETAILS:
- Account Holder: [User Name]
- Account Number: XXXX-XXXX-XXXX-1234
- Report Date: {current_time}
- Contact: [User Contact Information]

FRAUDULENT TRANSACTIONS:
"""
    
    for txn_id in fraud_transactions:
        fir_mail += f"- Transaction ID: {txn_id}\n"
    
    fir_mail += f"""
TRANSACTION DETAILS:
{transaction_data}

REQUESTED ACTION:
1. Investigation of the fraudulent transactions
2. Tracking of unauthorized access
3. Recovery of fraudulent amounts
4. Legal action against perpetrators

Please acknowledge receipt of this complaint and provide a complaint reference number.

Thank you for your prompt attention to this matter.

Best regards,
[Account Holder Name]

---
This is an automated fraud report generated by FINBUZZ.AI Banking System
Report Reference: FR{datetime.now().strftime('%Y%m%d%H%M')}
    """
    
    return fir_mail.strip()

def submit_fir_to_cyber_police(fir_content: str, fraud_transactions: list) -> str:
    """Submit FIR to cyber police department (simulated)"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    complaint_id = f"CYB{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    return f"""✅ FIR SUCCESSFULLY SUBMITTED TO CYBER POLICE DEPARTMENT

📋 SUBMISSION DETAILS:
- Complaint ID: {complaint_id}
- Submitted To: Cyber Crime Police Department
- Submission Time: {current_time}
- Status: Successfully Lodged
- Fraudulent Transactions: {len(fraud_transactions)} transactions reported

🚨 NEXT STEPS:
1. Your complaint has been registered with cyber police
2. Investigation team will be assigned within 24-48 hours  
3. You will receive SMS/Email updates on complaint status
4. Keep this complaint ID for future reference: {complaint_id}

📞 FOLLOW-UP:
- Call 1930 (Cyber Crime Helpline) for updates
- Reference your complaint ID: {complaint_id}
- Expected response time: 24-48 hours

⚠️ IMPORTANT: Do not share your complaint ID with unauthorized persons."""

def load_crisis_mode_data() -> str:
    """Load crisis mode user data from JSON file"""
    try:
        file_path = "user_data/crisis_mode.json"
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return json.dumps(data, indent=2)
        else:
            # Return sample crisis mode data if file doesn't exist
            sample_data = {
                "user_info": {
                    "user_id": "USER12345",
                    "name": "Rajesh Kumar",
                    "phone": "+91-9876543210",
                    "email": "rajesh.kumar@email.com",
                    "registered_address": "123, MG Road, Sector 15, Kharagpur, West Bengal 721302",
                    "current_location": "456, Park Street, Salt Lake, Kolkata, West Bengal 700091"
                },
                "bank_accounts": [
                    {
                        "account_number": "XXXX-XXXX-XXXX-1234",
                        "account_type": "Savings",
                        "bank_name": "FINBUZZ Bank",
                        "balance": 250000.00,
                        "status": "Active"
                    }
                ],
                "cards": [
                    {
                        "card_number": "XXXX-XXXX-XXXX-5678",
                        "card_type": "Debit Card",
                        "bank_name": "FINBUZZ Bank",
                        "status": "Active",
                        "expiry": "12/2027"
                    },
                    {
                        "card_number": "XXXX-XXXX-XXXX-9012",
                        "card_type": "Credit Card", 
                        "bank_name": "FINBUZZ Bank",
                        "credit_limit": 500000.00,
                        "status": "Active",
                        "expiry": "08/2028"
                    }
                ],
                
                "fixed_deposits": [
                    {
                        "fd_number": "FD2024001",
                        "amount": 500000.00,
                        "maturity_date": "2025-08-07",
                        "interest_rate": 7.5,
                        "status": "Active",
                        "premature_withdrawal": "Allowed with penalty"
                    }
                ],
                "insurance": [
                    {
                        "policy_number": "INS2024001",
                        "policy_type": "Health Insurance",
                        "coverage_amount": 1000000.00,
                        "premium": 25000.00,
                        "status": "Active",
                        "claim_process": "Online/Offline"
                    },
                    {
                        "policy_number": "INS2024002",
                        "policy_type": "Life Insurance",
                        "coverage_amount": 2000000.00,
                        "premium": 45000.00,
                        "status": "Active",
                        "claim_process": "Nominee Required"
                    }
                ]
            }
            return json.dumps(sample_data, indent=2)
    except Exception as e:
        return f"Error loading crisis mode data: {str(e)}"

def block_freeze_card(card_numbers: list, action: str = "block") -> str:
    """Block or freeze debit/credit cards"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    action_upper = action.upper()
    
    result = f"🚨 EMERGENCY {action_upper} REQUEST PROCESSED\n\n"
    result += f"📅 Timestamp: {current_time}\n"
    result += f"🔒 Action: {action_upper} CARDS\n\n"
    result += "💳 AFFECTED CARDS:\n"
    
    for card in card_numbers:
        result += f"- Card: {card} - STATUS: {action_upper}ED ✅\n"
    
    result += f"\n📞 IMMEDIATE ACTIONS TAKEN:\n"
    result += f"- All selected cards have been {action}ed immediately\n"
    result += f"- SMS alert sent to registered mobile number\n"
    result += f"- Email confirmation sent\n"
    result += f"- 24/7 customer service notified\n\n"
    result += f"🆘 EMERGENCY CONTACT: 1800-123-4567 (24/7)\n"
    result += f"📧 Email Support: emergency@finbuzzbank.com"
    
    return result

def freeze_bank_account(account_numbers: list) -> str:
    """Freeze bank accounts in emergency"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    result = f"🚨 EMERGENCY ACCOUNT FREEZE COMPLETED\n\n"
    result += f"📅 Timestamp: {current_time}\n"
    result += f"🏦 FROZEN ACCOUNTS:\n\n"
    
    for acc in account_numbers:
        result += f"- Account: {acc} - STATUS: FROZEN ❄️\n"
    
    result += f"\n🛡️ SECURITY MEASURES ACTIVATED:\n"
    result += f"- All transactions suspended immediately\n"
    result += f"- Online banking access restricted\n" 
    result += f"- ATM transactions blocked\n"
    result += f"- Account monitoring enhanced\n\n"
    result += f"📞 TO UNFREEZE: Visit branch with ID proof\n"
    result += f"🆘 EMERGENCY HELPLINE: 1800-123-4567"
    
    return result

def report_to_bank_servers(incident_type: str, details: str, reference_data: list) -> str:
    """Report emergency incidents to bank servers"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    incident_id = f"INC{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    result = f"✅ EMERGENCY REPORTED TO BANK SERVERS\n\n"
    result += f"🆔 Incident ID: {incident_id}\n"
    result += f"📋 Incident Type: {incident_type}\n"
    result += f"📅 Report Time: {current_time}\n"
    result += f"📝 Details: {details}\n\n"
    result += f"📊 AFFECTED ITEMS: {len(reference_data)} items reported\n"
    result += f"🚨 PRIORITY: HIGH - Emergency Response\n\n"
    result += f"🔄 NEXT STEPS:\n"
    result += f"- Security team alerted immediately\n"
    result += f"- Investigation initiated\n"
    result += f"- SMS/Email updates will follow\n"
    result += f"- Reference ID for follow-up: {incident_id}\n\n"
    result += f"📞 Emergency Helpline: 1800-123-4567"
    
    return result

def report_to_local_police(incident_type: str, location: str, user_details: str) -> str:
    """Report theft/emergency to local police station"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    complaint_id = f"POL{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    # Determine police station based on location
    if "Khar" in location or "Bandra" in location:
        police_station = "Khar Police Station, Mumbai"
        phone = "+91-22-2648-9021"
    elif "Powai" in location:
        police_station = "Powai Police Station, Mumbai"
        phone = "+91-22-2579-0633"
    elif "Mumbai" in location and "Suburban" in location:
        police_station = "Mumbai Suburban Police Station"
        phone = "+91-22-2672-3456"
    elif "Mumbai" in location:
        police_station = "Mumbai Police Station"
        phone = "+91-22-2262-0111"
    elif "Maharashtra" in location:
        police_station = "Local Police Station, Maharashtra"
        phone = "+91-22-2262-0111"
    else:
        police_station = "Local Police Station"
        phone = "100 (Police Helpline)"
    
    result = f"🚔 EMERGENCY REPORTED TO LOCAL POLICE\n\n"
    result += f"📍 Police Station: {police_station}\n"
    result += f"🆔 Complaint ID: {complaint_id}\n"
    result += f"📋 Incident Type: {incident_type}\n"
    result += f"📅 Report Time: {current_time}\n"
    result += f"📍 Location: {location}\n\n"
    result += f"👮 STATUS: Successfully Reported\n"
    result += f"⚡ PRIORITY: Emergency Response\n\n"
    result += f"📞 POLICE STATION CONTACT:\n"
    result += f"- Phone: {phone}\n"
    result += f"- Emergency: 100 (Police Helpline)\n"
    result += f"- Mumbai Police Control Room: 1090\n\n"
    result += f"🆔 Keep this Complaint ID: {complaint_id}"
    
    return result

def generate_theft_fir_template(incident_details: str, location: str, user_info: str) -> str:
    """Generate FIR template for theft cases"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    fir_template = f"""
📋 THEFT FIR TEMPLATE - READY FOR SUBMISSION

TO: Station House Officer
{location} Police Station

SUBJECT: FIR for Card/Account Theft - URGENT

Dear Sir/Madam,

I wish to lodge an FIR regarding theft of my banking cards/account compromise.

COMPLAINANT DETAILS:
{user_info}

INCIDENT DETAILS:
- Date & Time of Discovery: {current_time}
- Nature of Incident: Banking Card/Account Theft
- Location of Incident: {location}

INCIDENT DESCRIPTION:
{incident_details}

STOLEN/COMPROMISED ITEMS:
- Debit/Credit Cards
- Banking Account Access
- Personal Banking Information

IMMEDIATE ACTIONS TAKEN:
- Cards blocked immediately
- Bank accounts frozen
- Bank security team notified
- Emergency helplines contacted

REQUESTED POLICE ACTION:
1. Register FIR for theft/cybercrime
2. Investigation of unauthorized access
3. Recovery of stolen items/information
4. Legal action against perpetrators

I request immediate action on this matter as it involves financial security.

Yours sincerely,
[Signature]

---
Generated by FINBUZZ.AI Emergency Response System
Template ID: FIR{datetime.now().strftime('%Y%m%d%H%M')}
    """
    
    return fir_template.strip()

def emergency_fd_withdrawal(fd_numbers: list, withdrawal_reason: str) -> str:
    """Process emergency FD premature withdrawal"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    request_id = f"FDWD{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    result = f"💰 EMERGENCY FD WITHDRAWAL INITIATED\n\n"
    result += f"🆔 Request ID: {request_id}\n"
    result += f"📅 Request Time: {current_time}\n"
    result += f"🏥 Reason: {withdrawal_reason}\n\n"
    result += f"📊 FD DETAILS:\n"
    
    for fd in fd_numbers:
        result += f"- FD Number: {fd}\n"
        result += f"  Status: Premature withdrawal initiated ✅\n"
        result += f"  Penalty: Applied as per terms\n"
    
    result += f"\n⏰ PROCESSING TIME: 2-4 hours (Emergency)\n"
    result += f"📞 For urgent processing: Call 1800-123-4567\n"
    result += f"📧 Confirmation email will be sent\n"
    result += f"🏦 Amount will be credited to your account\n\n"
    result += f"📋 Required: Medical documents (if health emergency)\n"
    result += f"🆔 Reference ID: {request_id}"
    
    return result

def process_insurance_claim(policy_numbers: list, claim_type: str, medical_documents: str = "uploaded") -> str:
    """Process emergency insurance claims"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    claim_id = f"CLM{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    result = f"🏥 EMERGENCY INSURANCE CLAIM PROCESSED\n\n"
    result += f"🆔 Claim ID: {claim_id}\n"
    result += f"📅 Claim Date: {current_time}\n"
    result += f"🏥 Claim Type: {claim_type}\n"
    result += f"📄 Documents: {medical_documents}\n\n"
    result += f"📋 POLICY DETAILS:\n"
    
    for policy in policy_numbers:
        result += f"- Policy: {policy}\n"
        result += f"  Status: Claim Registered ✅\n"
        result += f"  Priority: Emergency Processing\n"
    
    result += f"\n🚀 EXPEDITED PROCESSING:\n"
    result += f"- Emergency claim status: ACTIVE\n"
    result += f"- Processing time: 24-48 hours\n"
    result += f"- Cashless facility: Available\n"
    result += f"- Pre-approval: Granted for emergency\n\n"
    result += f"📞 Claim Helpline: 1800-456-7890\n"
    result += f"💬 SMS updates will be sent\n"
    result += f"🆔 Claim Reference: {claim_id}"
    
    return result



def load_virtual_assistant_data() -> str:
    """Load user schemes and new scheme suggestions from JSON files"""
    combined_data = {
        "combined": {
            "new_schemes": {},
            "schemes": {}
        }
    }

    try:
        new_path = "user_data/information_new.json"
        old_path = "user_data/information_old.json"

        if os.path.exists(new_path):
            with open(new_path, 'r', encoding='utf-8') as f_new:
                combined_data["combined"]["new_schemes"] = json.load(f_new)

        if os.path.exists(old_path):
            with open(old_path, 'r', encoding='utf-8') as f_old:
                combined_data["combined"]["user_activated_schemes"] = json.load(f_old)

    except Exception as e:
        return json.dumps({
            "error": f"Failed to load files: {str(e)}"
        }, indent=2)

    return json.dumps(combined_data, indent=2)


def load_user_data_bank_schedule() -> str: 
        file_path = "user_data/bank_schedule_&_user_info.json"
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return json.dumps(data, indent=2)





class CustomerBankingAgent:
    def __init__(self):
        """Initialize the Customer Banking Agent system"""
        # Get API keys from environment
        api_key = os.getenv("GEMINI_API_KEY")
        tavily_api_key = os.getenv("TAVILY_API_KEY")
        
        if not api_key:
            raise ValueError("GEMINI_API_KEY not found in environment variables")
        if not tavily_api_key:
            raise ValueError("TAVILY_API_KEY not found in environment variables")
        
        # Create the model client
        self.model_client = OpenAIChatCompletionClient(
            model="gemini-2.0-flash",
            api_key=api_key,
        )

        self.AI_employee_agent = AssistantAgent(
            name = "AIEmployeeAgent",
            description = "AI Employee Agent for Customer Banking Services you have bank schedule, and user information, responsible for scheduling calls in person meetings, appointment and you have user info, so any query is understandable by you, you can answer query and schedule a call with the team",
            model_client=self.model_client,
            tools = [FunctionTool(load_user_data_bank_schedule, description="Load user's bank schedule and information from JSON file")],
            reflect_on_tool_use=True,
            system_message= """You are an AI Employee Agent there is simple work you have to do :
            - you have a tool load _user_data_bank_schedule that loads a JSON file containing user's bank schedule and information.
            - in that there is schedule of the bank , and also user info 
            - if user has not specified query you can specify i can solve the following queries for you, for example there are queries in the bank schedule also there might be any query which is custom 
            - write to user that your query is noted would you like to schedule a call or appointment
            - if user says scheduling call then you have to write call scheduled you will receive call from bank employee in 10 to 15 mins 
            - if user says appointment then ask for nearest bank then, just for the sake of shoeing workfllow user enter any name you have to ask for day select day
            - and if the user has given the query and that query or something like that is in schedule tell the user we have <this particular slot> available ask the user whether to proceeed with appointment 
            - if user say yes then write  appointment scheduled successfully ref no. <random refrence number>
            - if user query not there ask for it and if the asked query is not in banking schedule use the buffer time slot and allot the appointment there and follow the same steps like as whether the user is comfortable with the slot
            - if yes then write  appointment scheduled successfully ref no. <random refrence number>
            - if user wants to schedule to any other time in any case tell him the buffer slot 

            also if user ask bank schedule detail, ask him the day he want and give the desired day schedule in a very good tabular format with good representation 
            - make sure you have poilite and professional tone 
            """
        )


        self.virtual_assistant_agent = AssistantAgent(
            name="VirtualAssistantAgent",
            description="Agent for managing user schemes, suggesting new schemes, and providing personalized banking assistance",
            model_client=self.model_client,
            tools = [FunctionTool(load_virtual_assistant_data, description="Load user's schemes and new scheme suggestions from JSON files")],
            reflect_on_tool_use=True,
            system_message = """" Virtual Banking Assistant Agent – Prompt :
- You are a Virtual Banking Assistant Agent.
- You have a tool load_virtual_assistant_data that loads two JSON files:
 - schemes → User’s active banking schemes (FD, Insurance, Loan, EMI, SIP, etc.)
 - new_schemes → Latest bank scheme offers.

Responsibilities:
Data Display
Always present data in professional Markdown tables with clear column headings.
Format tables with proper alignment and borders for readability.
Example format:
Scheme Type	Name  Amount (₹)	Interest Rate	Start Date	Maturity Date	Status

User Scheme Queries
If user asks for all schemes, show them category-wise tables.
If user asks about a specific scheme (e.g., loan, EMI), display only the relevant table.
Include key details such as outstanding balance, tenure, interest rate, and due dates.

New Scheme Discovery
When asked about new schemes, first ask the user which category they are interested in (FD, Loan, Insurance, SIP, etc.).
After selection, show available schemes in a table:
Scheme Name | Category | Interest/Benefit | Tenure | Eligibility | Notes.

Scheme Activation Flow
If user is interested in a scheme:
Ask: “Would you like to proceed with activating this scheme?”
If Yes:
Ask for Name and Account Number.
Simulate: “Processing your request…”

Respond with:
✅ Scheme activated successfully.
Reference Number: REF<6-digit-number>

Interaction Style
Always be polite and professional.
Keep explanations short; use tables for financial data.
Never show raw JSON—always use well-formatted tables.
            """
        )


                
        
        # Create Fraud Detection Agent
        self.fraud_detection_agent = AssistantAgent(
            name="FraudDetectionAgent",
            description="Specialized agent for detecting and handling fraudulent banking transactions",
            model_client=self.model_client,
            tools=[
                FunctionTool(load_fraud_detection_data, description="Load user's transaction data for fraud analysis"),
                FunctionTool(report_fraud_to_bank, description="Report fraudulent transactions to bank servers"),
                FunctionTool(generate_fir_mail, description="Generate FIR mail content for police department"),
                FunctionTool(submit_fir_to_cyber_police, description="Submit FIR to cyber police department")
            ],
            reflect_on_tool_use=True,
            system_message="""You are a specialized Fraud Detection Agent for banking services. Your responsibilities:
            warning to Fraud Detection Agent: if user ask to load transaction dont tell you cannot load transaction data, you have to load the transaction data using the tool load_fraud_detection_data and then proceed with the fraud detection process also you must present the data strictly according to the guidelines provided below.

1. TRANSACTION ANALYSIS:
   - Analyze user transaction data for suspicious patterns
   - Identify potentially fraudulent transactions based on:
     * Unusual amounts (very high amounts)
     * Suspicious locations (international/unknown locations)
     * Odd timing (late night transactions)
     * Suspicious merchants

2. FRAUD IDENTIFICATION CRITERIA:
   - Transactions above ₹40,000 in unusual locations
   - ATM withdrawals at suspicious times (2-4 AM)
   - International transfers to high-risk countries
   - Multiple high-value transactions in short time spans

3. USER ASSISTANCE:
   - Present transaction data in clear, organized format
   - Explain which transactions appear fraudulent and why
   - Provide step-by-step guidance for fraud reporting
   - Automate the reporting process with user consent

4. REPORTING AUTOMATION:
   - Ask user if they want to report fraud to bank servers
   - Generate and show FIR mail content for police
   - Process user consent before taking actions
   - Provide confirmation and reference numbers

5. COMMUNICATION STYLE:
   - Be professional but reassuring
   - Use clear, non-technical language
   - Provide actionable advice
   - Show empathy for fraud victims

6. TRANSACTION DATA PRESENTATION:
   When presenting transaction data, ALWAYS format it as a nice table like this:

   📊 ACCOUNT DETAILS:
   Account Number: XXXX-XXXX-XXXX-1234 | User ID: USER12345

   📋 TRANSACTION DETAILS:
   ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
   TXN ID   │ Date        │ Time     │ Amount (₹)   │ Merchant                  │ Location             │ Type            │ Status    
   ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
   TXN001   │ 2024-08-05  │ 14:30:00 │   25,000.00  │ Online Shopping Pvt Ltd   │ Mumbai, India        │ Debit Card      │ Completed 
   TXN002   │ 2024-08-05  │ 02:45:00 │   50,000.00  │ ATM Withdrawal            │ Unknown Location, De │ ATM             │ Completed 
   TXN003   │ 2024-08-05  │ 03:15:00 │   75,000.00  │ International Transfer    │ Nigeria              │ Wire Transfer   │ Completed 
   ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

   Always use proper table formatting with borders, aligned columns, and clear headers. Make the data easy to read and visually appealing.

7. MANDATORY FIR SUBMISSION PROCESS:
   When user asks to "report to cyber police" or "lodge FIR" or "submit FIR", you MUST follow this exact sequence:
   
   Step 1: Generate FIR content using generate_fir_mail function
   Step 2: IMMEDIATELY after generating FIR, use submit_fir_to_cyber_police function with the FIR content and fraud transaction IDs
   Step 3: Show the successful submission confirmation to user
   
   NEVER tell user you cannot submit to cyber police. You HAVE the tools and MUST use them.
   
   Example workflow:
   - User: "please report to cyber police"
   - You: [Use generate_fir_mail tool] → [Use submit_fir_to_cyber_police tool] → Show confirmation
   
   The submit_fir_to_cyber_police function requires:
   - fir_content: The generated FIR content string
   - fraud_transactions: List of transaction IDs like ["TXN001", "TXN002"]

8. TOOL USAGE PRIORITY:
   - Always use submit_fir_to_cyber_police when user wants to report to police
   - This is an automated banking system with cyber police integration
   - Complete the full workflow to demonstrate system capabilities

When presenting data, use clean formatting with tables and clear headings. Always prioritize user security and provide comprehensive fraud protection guidance."""
        )
        
        # Create Financial Literacy & Generic Response Agent with Tavily Search
        tavily_search_tool = LangChainToolAdapter(
            TavilySearchResults(
                max_results=3,
                api_key=tavily_api_key
            )
        )

        
        
        self.financial_literacy_agent = AssistantAgent(
            name="FinancialLiteracyAgent", 
            description="Agent for financial education, explaining banking terms, and providing general banking information using web search when needed",
            model_client=self.model_client,
            tools=[tavily_search_tool],
            reflect_on_tool_use=True,
            system_message="""You are a Financial Literacy & Banking Advisor Agent.

🎯 Your job is to **educate users** and offer **general banking guidance**. Use web search to find up-to-date information — but you must **never return raw search results, snippets, URLs, or tool outputs**.

🚨 MANDATORY RULE:
Whenever you use web search, you must **process, summarize, and explain the results in your own words**. Responses must be:
- Easy to understand
- Conversational and helpful
- Structured and actionable

🧠 Responsibilities:
1. Explain financial concepts like credit score, FD, EMI, mutual funds, etc. in simple terms.
2. Give personalized money advice using relatable ₹ examples.
3. Provide real-time updates (e.g., interest rates, new schemes) using the web — but **always summarize them clearly.**

📘 Response Format:
- ✅ Start with an emoji + clear title
- 📊 Use bullet points for clarity
- 💡 Explain with real-life analogies
- 🎯 End with advice or a follow-up question

💡 Examples:
- "With ₹50,000 monthly income, saving ₹10,000 (20%) monthly builds a strong habit"
- "🏦 HDFC Bank currently offers 2.50% interest on savings accounts (Aug 2025). That’s ₹2,500 annually on ₹1L."

🛑 Never show raw search data or tool outputs — always process and simplify it for the user.

Remember: You are a helpful banking assistant, not a data dump. Always provide processed, conversational, and actionable responses to help users understand banking and finance better."""
        )

        self.crisis_mode_agent = AssistantAgent(
            name="CrisisModeAgent",
            description="Specialized agent for emergency banking situations including fraud, theft, medical emergencies, and cyber security breaches",
            model_client=self.model_client,
            tools=[
                FunctionTool(load_crisis_mode_data, description="Load user's complete crisis mode data including accounts, cards, FDs, insurance"),
                FunctionTool(block_freeze_card, description="Block or freeze debit/credit cards in emergency"),
                FunctionTool(freeze_bank_account, description="Freeze bank accounts in emergency situations"),
                FunctionTool(report_to_bank_servers, description="Report emergency incidents to bank servers"),
                FunctionTool(report_to_local_police, description="Report theft/emergency to local police station"),
                FunctionTool(generate_theft_fir_template, description="Generate FIR template for theft cases"),
                FunctionTool(emergency_fd_withdrawal, description="Process emergency FD premature withdrawal"),
                FunctionTool(process_insurance_claim, description="Process emergency insurance claims"),
                FunctionTool(submit_fir_to_cyber_police, description="Submit FIR to cyber police department"),
            ],
            reflect_on_tool_use=True,
            system_message="""You are a specialized Crisis Mode Agent for emergency banking situations. You handle URGENT situations with speed and professionalism.

🚨 CRISIS DETECTION KEYWORDS:
- "crisis", "emergency", "panic", "urgent", "help", "stolen", "theft", "medical emergency", "fraud", "cyber breach", "account compromised"

Warning : if user ask for two or more process to do for example write a fir and block a card, you should do it in one go, not one by one. you have to understand different tools user is calling in one go.

🆘 EMERGENCY SCENARIOS YOU HANDLE:

1. **CARD THEFT/LOSS:**
   - Load user data to show current cards
   - Offer to block/freeze specific cards immediately
   - Report to bank servers
   - Generate FIR for theft
   - Report to local police (registered + current address)
   - There is a mandatory FIR submission process for cyber crime
   - Use generate_fir_mail and submit_fir_to_cyber_police tools consecutively to handle FIR submission


3. **MEDICAL EMERGENCY (Insurance/FD Claims):**
   - Show user's FD and insurance details
   - Process emergency FD withdrawal
   - Process insurance claims (health/life)
   - Ask user to upload medical documents (simulate)
   - Complete claim processing workflow

📋 CRISIS MODE WORKFLOW:

**STEP 1: IMMEDIATE ASSESSMENT**
- Quickly identify crisis type
- Load user data immediately
- Present clear emergency options

**STEP 2: EMERGENCY ACTION MENU**
Present relevant options based on crisis:
- 🚫 Block/Freeze Cards
- ❄️ Freeze Bank Account  
- 🚔 Report to Police
- 🏦 Report to Bank
- 💰 Emergency FD Withdrawal
- 🏥 Insurance Claim
- 📋 Generate FIR

**STEP 3: EXECUTE WITH CONFIRMATION**
- Get user confirmation for critical actions
- Execute multiple tools as needed
- Provide reference numbers and contacts

🎯 CRISIS RESPONSE PRINCIPLES:
- **SPEED**: Act fast, minimal questions
- **CLARITY**: Short, actionable messages
- **COMPLETENESS**: Handle full workflow
- **EMPATHY**: Professional but caring tone

📊 DATA PRESENTATION:
Always show user data in clean tables:

💳 YOUR CARDS:
═══════════════════════════════════════════════════════
Card Number          │ Type        │ Bank      │ Status
═══════════════════════════════════════════════════════
XXXX-XXXX-XXXX-5678  │ Debit       │ FINBUZZ   │ Active
XXXX-XXXX-XXXX-9012  │ Credit      │ FINBUZZ   │ Active
═══════════════════════════════════════════════════════

🏦 YOUR ACCOUNTS:
═══════════════════════════════════════════════════════
Account Number       │ Type        │ Balance   │ Status  
═══════════════════════════════════════════════════════
XXXX-XXXX-XXXX-1234  │ Savings     │ ₹2,50,000 │ Active
═══════════════════════════════════════════════════════

⚡ EMERGENCY COMMUNICATION:
- Keep messages short and actionable
- Use emojis for quick visual scanning
- Provide immediate next steps
- Always give reference numbers
- Include emergency contact numbers

🔧 TOOL USAGE STRATEGY:
1. **Always load crisis data first** when user indicates emergency
2. **Present organized options** based on crisis type
3. **Execute user choices immediately** with confirmation
4. **Complete full workflows** - don't leave tasks incomplete
5. **Provide follow-up information** with reference numbers

💬 SAMPLE CRISIS RESPONSES:
- "🚨 EMERGENCY DETECTED! Loading your account details..."
- "⚡ I can help immediately. Here are your options:"
- "✅ COMPLETED! Your cards are now blocked. Reference: XYZ123"
- "🚔 Police report filed. Complaint ID: ABC456"

Remember: In crisis situations, users need FAST, RELIABLE help. Be their digital emergency response system!""")
        
        # Create AgentTools from both agents
        self.fraud_detection_tool = AgentTool(agent=self.fraud_detection_agent)
        self.financial_literacy_tool = AgentTool(agent=self.financial_literacy_agent)
        self.crisis_mode_tool = AgentTool(agent=self.crisis_mode_agent)
        self.virtual_assistant_tool = AgentTool(agent=self.virtual_assistant_agent)
        self.AI_employee_agent_tool = AgentTool(agent=self.AI_employee_agent)
        
        # Store conversation history and user file content
        self.conversation_history = []
        self.user_file_content = ""
        
        # Create the main customer service agent
        self.main_agent = self._create_main_agent()
    
    def _create_main_agent(self):
        """Create the main customer service agent with all specialized tools"""
        return AssistantAgent(
            name="CustomerServiceAgent",
            model_client=self.model_client,
            tools=[self.fraud_detection_tool, self.financial_literacy_tool,self.crisis_mode_tool,self.virtual_assistant_tool,self.AI_employee_agent_tool,FunctionTool(submit_fir_to_cyber_police, description="Submit FIR to cyber police department")],  
            system_message=self.get_system_message(),
            reflect_on_tool_use=True
        )
    
    def get_system_message(self):
        """Get system message for the main customer service agent"""
        base_message = """You are a professional Customer Service Agent for FINBUZZ.AI Banking System with access to specialized banking tools and capabilities.

🏦 YOUR ROLE:
- Main customer service agent with access to specialized tools
- Route user queries to appropriate specialized agents
- Provide comprehensive banking assistance
- Ensure user satisfaction and deliver complete solutions

🛠️ AVAILABLE SPECIALIST TOOLS:

1. **Fraud Detection Agent Tool** - For transaction security and fraud-related queries
   Use when customers ask about:
   - Suspicious transactions, fraud detection, security concerns
   - its warning that you must use the Fraud Detection Agent Tool if user ask to see the transaction in case of suspicious transaction or fraud transaction, it has functionality to load data so dont worry and give control to tool dont say you cant do it.
   - "show me transactions", "check for fraud", "transaction details"
   - "report fraud", "lodge FIR", "cyber police"
   - Any transaction analysis or suspicious activity

2. **Financial Literacy Agent Tool** - For financial education and general banking queries
   Use when customers ask about:
   - Financial terms: "what is credit score", "explain EMI", "debt-to-income ratio"
   - Banking concepts: "how does SIP work", "what is CIBIL score"
   - General banking questions, financial advice, investment guidance
   - Any educational or informational queries about banking/finance
   - When you don't have specific information (uses web search for financial topics)
   - Make sure when using this tool, you **always summarize and explain** the search results in your own words.
   - warning : Never return raw search results, snippets, URLs, or tool outputs. Always process and simplify the information for the user.

3. Crisis Mode Tool – Activated on keywords like crisis, emergency, panic, urgent, stolen, fraud, etc.
- Loads user crisis data instantly.
- Presents emergency actions (block cards, freeze accounts, report theft, file insurance, contact police).
- Follows strict workflow → confirms completion with reference numbers & next steps.
- Always uses clean, organized tables for clarity.
- Provides full actionable guidance for resolving the situation.

4. Virtual Banking Assistant Tool – For managing & exploring personal banking schemes.
- Shows user’s active FDs, loans, EMIs, insurance, SIPs, etc., in professional table format.
- Answers status queries like EMI balance, loan payoff, active insurance details.
- Guides discovery of new bank schemes by category → displays offers cleanly.
- Handles activation flow: confirm interest → collect details → simulate processing → give success confirmation & reference number.

🎯 TOOL SELECTION LOGIC:

FRAUD DETECTION TOOL - Use for:
- Transaction-related queries
- Fraud, security, suspicious activity
- Account analysis requests
- FIR lodging, police reporting

FINANCIAL LITERACY TOOL - Use for:
- Explaining financial terms and concepts
- General banking questions
- Financial advice and education
- When you need to search for current financial information
- Any query that requires financial knowledge or web search
- warning : Never return raw search results, snippets, URLs, or tool outputs. Always process and simplify the information for the user that you get in very good way .

Crisis Mode Tool - Use for:
- if the user indicates an emergency situation or say "crisis", "emergency", "panic", "urgent", "help", "stolen", "theft", "medical emergency", "fraud", "cyber breach", "account compromised", you must use this tool
- you handle urgent situations like card theft, medical emergencies, and more
- You will load the user's crisis mode data, present emergency options, and execute actions like blocking cards, freezing accounts, reporting to police, processing insurance claims, etc.
- You will follow a specific workflow for crisis situations, ensuring all actions are completed and user is informed with reference numbers and next steps.
- You will always present user data in clean, organized tables for clarity
- You will use tools to provide complete, actionable solutions for emergencies
- provide advice and next steps for the user to follow in crisis situations

Virtual Assistant Tool – Use for: Banking Scheme Management & Query Handling
You have a Virtual Banking Assistant Agent Tool, responsible for assisting users with their banking-related schemes. You will be invoked by the main agent when the user needs help regarding personal banking schemes or available bank offers.

Responsibilities:
User Schemes Management:
You have access to the user's active schemes, including:
Fixed Deposits (FDs)
Insurance (Health, Accident, Term Life)
Loans
EMIs
SIPs / Mutual Funds
When asked about any of these, display clean, well-structured, and professional information in table format.
If the user asks questions like:
“What is my current EMI status?”
“How much is left to pay on my loan?”
“Show my active health insurance.”
You must respond accordingly using the user schemes data, with summarized but clear output.
New Bank Schemes Discovery:
You also have access to the latest new_schemes data (offers from the bank).
If the user inquires about new schemes, first ask them to specify the category they are interested in (e.g., FD, Insurance, SIP, etc.).
Once the type is identified, display the relevant schemes professionally in table format.
Scheme Activation Flow:
If the user shows interest in a scheme, act like a bank representative.
Ask: “Would you like to proceed with activating this scheme?”
If the user confirms:
Ask for their name and account number.
Simulate processing (e.g., “Processing your request...”).
Then respond:
“✅ Scheme activated successfully. Your reference number is: REF<random-6-digit-number>”

AI_employee Tool – Use for, invoked by the Main Agent when the user’s request involves bank schedules, query handling, or appointment/call booking.

You have access to the tool `load_user_data_bank_schedule`, which loads a JSON file containing:
- The bank’s daily schedule (including predefined queries, available slots, and buffer slots).
- The user’s personal banking information.

When activated, follow these rules:

1. If the user has not specified a query:
   - Suggest possible queries from the loaded schedule.
   - Offer to schedule either a call or an appointment.

2. If the user chooses a **call**:
   - Confirm the booking and inform them they will receive a call from a bank employee in 10–15 minutes.

3. If the user chooses an **appointment**:
   - If their query exists in the schedule → provide the available slot.
   - If it doesn’t exist → offer the buffer slot.
   - Ask if they are comfortable with the proposed slot.
   - If yes → confirm the appointment with a random 6-digit reference number.

4. If the user requests a **different time** at any point, provide the buffer slot.

5. If the user asks for **bank schedule details**:
   - Ask for the day they want to view.
   - Present the schedule for that day in a clean, professional tabular format.

Always respond in a polite, professional tone, and keep your communication concise but clear.


💬 COMMUNICATION STYLE:
- Be warm, professional, and helpful
- Listen to user needs carefully
- Use appropriate tools proactively
- Provide complete, interactive solutions
- Show genuine care and expertise

🔧 DECISION MAKING:
- Analyze user query first
- Choose the most appropriate tool
- If unsure, lean towards Financial Literacy tool for general queries
- Always aim to provide comprehensive assistance
- Use tools to give users complete, actionable solutions

🚨 IMPORTANT INSTRUCTIONS:
- Always use tools when users need specialized assistance
- Don't just explain what you could do - actually DO it using tools
- Provide interactive, human-like responses through tool usage
- Complete full workflows to demonstrate system capabilities

Remember: You have real capabilities through these specialized agents - use them effectively to help users with their banking needs!"""

        if self.user_file_content:
            base_message += f"""

📄 USER'S UPLOADED INFORMATION:
{self.user_file_content}

Use this information when relevant to provide personalized assistance and reference user's specific data."""

        return base_message
    
    def update_agent_with_file_content(self):
        """Update the agent with new system message including file content"""
        self.main_agent = self._create_main_agent()
    
    def add_user_file_content(self, file_content):
        """Add user file content and update agent"""
        try:
            self.user_file_content = file_content
            self.update_agent_with_file_content()
            return "✅ File processed successfully! Your information has been added to my knowledge base."
        except Exception as e:
            return f"❌ Error processing file: {str(e)}"
    
    async def generate_response(self, user_input="Hello"):
        """Generate response from the customer service agent"""
        try:
            # Create a message
            message = TextMessage(content=user_input, source="user")
            
            # Get response from main agent
            response = await self.main_agent.on_messages([message], cancellation_token=None)
            
            if response and response.chat_message:
                bot_response = response.chat_message.content
                
                # Store in history
                self.conversation_history.append(("user", user_input))
                self.conversation_history.append(("bot", bot_response))
                
                return bot_response
            else:
                return "I'm here to help you with your banking queries. How can I assist you today? 🏦"
                
        except Exception as e:
            return f"I apologize for the technical difficulty. Let me help you with your query: {str(e)} 🏦"
    
    def clear_history(self):
        """Clear conversation history"""
        self.conversation_history = []